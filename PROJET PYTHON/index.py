  #! /usr/bin/env python
 #  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Jul 30, 2019 02:02:35 PM UTC  platform: Windows NT

import sys
from tkinter.messagebox import *
from fonctions import *
from interface import *
import webbrowser

# ---------------- Appel des fonctions ----------------
data = recupData()
pari = recupPari(data)
enjeux = recupEnjeu(data)


try:
     import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
     import ttk
     py3 = False
except ImportError:
     import tkinter.ttk as ttk
     py3 = True
 
import index_support
 
def vp_start_gui():
     '''Starting point when module is the main routine.'''
     global val, w, root
     root = tk.Tk()
     top = Toplevel1 (root)
     index_support.init(root, top)
     root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
     '''Starting point when module is imported by another program.'''
     global w, w_win, rt
     rt = root
     w = tk.Toplevel (root)
     top = Toplevel1 (w)
     index_support.init(w, top, *args, **kwargs)
     return (w, top)
def destroy_Toplevel1():
     global w
     w.destroy()
     w = None



 
class Toplevel1:

#------------- Mes fonctions --------------------------

#  ---------------- Fonction quiter ------------
    def quitter(self):
        message = askyesno ("Fenetre de fermeture", "Voulez-vous vraimment quitter ?")
        if message:
                quit()

    def lien_html():
        webbrowser.open('https://www.ccomptes.fr/fr/site/')

    def tracerTousPari(self):
        def tracerTotalPari():
             tab = []
             for an in annee:
                total = etudePari(pari,an)
                tab.append(total['totalpari'])
             plt.pie(tab, labels=annee, autopct='%1.1f%%', shadow=True, startangle=90)
             plt.show()
        message = askokcancel ("Tracer de graphe", "Continuez pour tracer le graphe de 2005 a 2016?")
        if message:
                tracerTotalPari()

    def tracerTousPop(self):
        def tracerTotalPop():

            def etudePop(enjeux, an):
                etude= {
                        'max': [pays[enjeux[an].index(np.max(enjeux[an]))], np.max(enjeux[an])],
                        'min': [pays[enjeux[an].index(np.min(enjeux[an]))], np.min(enjeux[an])] ,
                        'total': np.sum(enjeux[an])
                        }
                return etude

            tab =[]
            for an in annee:
                enjeu = etudePop(enjeux,an)
                tab.append(enjeu['total'])
            plt.bar(annee,tab)
            plt.xlabel('annee')
            plt.ylabel('Enjeux pour 10 000 habitants')
            plt.title('Diagramme de l\'enjeux de la population mondiale de pari mutuel')
            plt.show()
        message = askokcancel ("Tracer de graphe", "Continuez pour tracer le graphe des enjeux de 2005 a 2016?")
        if message:
                tracerTotalPop()

               
    

# ---------------Fonction vider les champs -------------
    def videEntreePari(self):
        self.EntryPari.configure(bg ='white')
        self.EntryPari.delete(0, self.anneePari)
    
    def videEntreePop(self):
        self.EntryPop.configure(bg='white')
        self.EntryPop.delete(0, self.anneePop)



#------------ Recuperation de donnee  -------------------

    def recupAnPari(self):
        
        try:
              self.anneePari = int(self.EntryPari.get())

        except ValueError:
              self.anneePari = 0 

        if self.anneePari >=2005 and self.anneePari <= 2016:
              
              nouvelleFenetrePari(root,pari, self.anneePari)
        else:
              self.EntryPari.configure(bg ='red')
              showwarning('Avertissement', 'Mauvaise saisie, annee compris entre 2005 et 2016') 
              root.after(1000, self.videEntreePari)     
        
    def recupAnPop(self):
        try:
              self.anneePop = int(self.EntryPop.get())

        except ValueError:
              self.anneePop = 0 

        if self.anneePop >=2005 and self.anneePop <= 2016:
              
              nouvelleFenetrePop(root,enjeux,self.anneePop)
        else:
              self.EntryPop.configure(bg ='red')
              showwarning('Avertissement', 'Mauvaise saisie, annee compris entre 2005 et 2016') 
              root.after(1000, self.videEntreePop)  


    
# ----------------- Effacer lessaisi ----------------------

    def annulPari(self):
        annee = self.EntryPari.get()
        self.EntryPari.delete(0, annee)

    def annulPop(self):
        annee = self.EntryPop.get()
        self.EntryPop.delete(0, annee)

# ----------------- le constructeur  ---------------------------
    def __init__(self, top=None):
         '''This class configures and populates the toplevel window.
            top is the toplevel containing window.'''
         _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
         _fgcolor = '#000000'  # X11 color: 'black'
         _compcolor = '#d9d9d9' # X11 color: 'gray85'
         _ana1color = '#d9d9d9' # X11 color: 'gray85'
         _ana2color = '#ececec' # Closest X11 color: 'gray92'
 
         top.geometry("897x542+289+82")
         top.title("Pari Sporttif")
         top.iconbitmap("cheval.ico")
         top.configure(background="#d9d9d9")

         self.barreDeMenu=Menu(root)
        
         self.itemMenu1=Menu(self.barreDeMenu,tearoff=0)
         self.itemMenu1.add_command(label="A propos de l'application")
         self.itemMenu1.add_separator()
         self.itemMenu1.add_command(label="contactez l'auteur")
         self.barreDeMenu.add_cascade(label="Fichier",menu=self.itemMenu1)
        
         self.itemMenu2=Menu(self.barreDeMenu,tearoff=1)
         self.itemMenu2.add_command(label="Site du ministere francais des comptes", command=self.lien_html)
         self.barreDeMenu.add_cascade(label="Source",menu=self.itemMenu2)
        

         self.LabelTitre = Label(top)
         self.LabelTitre.place(relx=0.067, rely=0.050, relheight=0.153
                 , relwidth=0.839)
         self.LabelTitre.configure(background="#d9d9d9")
         self.LabelTitre.configure(disabledforeground="#a3a3a3")
         self.LabelTitre.configure(font='#ffffff')
         self.LabelTitre.configure(foreground="#000000")
         self.LabelTitre.configure(relief=SUNKEN)
         self.LabelTitre.configure(text='''ETUDE DES PARIS DE LA PMU DANS LE MONDE DE 2005 A 2016 ''')
         self.LabelTitre.configure(width=454)

         self.LabelframePari = tk.LabelFrame(top)
         self.LabelframePari.place(relx=0.067, rely=0.24, relheight=0.378
                 , relwidth=0.368)
         self.LabelframePari.configure(relief='groove')
         self.LabelframePari.configure(foreground="black")
         self.LabelframePari.configure(text='''PARI MUTUEL''')
         self.LabelframePari.configure(background="#d9d9d9")
         self.LabelframePari.configure(width=330)
 
         self.EntryPari = tk.Entry(self.LabelframePari)
         self.EntryPari.place(relx=0.373, rely=0.341, height=20, relwidth=0.497
                 , bordermode='ignore')
         self.EntryPari.configure(background="white")
         self.EntryPari.configure(disabledforeground="#a3a3a3")
         self.EntryPari.configure(font="TkFixedFont")
         self.EntryPari.configure(foreground="#000000")
         self.EntryPari.configure(insertbackground="black")
         self.EntryPari.insert(0 , "De 2005 a 2016")
 
         self.LabelPari = tk.Label(self.LabelframePari)
         self.LabelPari.place(relx=0.061, rely=0.341, height=21, width=74
                 , bordermode='ignore')
         self.LabelPari.configure(background="#d9d9d9")
         self.LabelPari.configure(disabledforeground="#a3a3a3")
         self.LabelPari.configure(foreground="#000000")
         self.LabelPari.configure(text='''Annee''')
         self.LabelPari.configure(width=74)
 
         self.ButtonAnnulPari = tk.Button(self.LabelframePari)
         self.ButtonAnnulPari.place(relx=0.061, rely=0.732, height=24, width=107
                 , bordermode='ignore')
         self.ButtonAnnulPari.configure(activebackground="#ececec")
         self.ButtonAnnulPari.configure(activeforeground="#000000")
         self.ButtonAnnulPari.configure(background="#d9d9d9")
         self.ButtonAnnulPari.configure(command=index_support.Annuler)
         self.ButtonAnnulPari.configure(disabledforeground="#a3a3a3")
         self.ButtonAnnulPari.configure(foreground="#000000")
         self.ButtonAnnulPari.configure(highlightbackground="#d9d9d9")
         self.ButtonAnnulPari.configure(highlightcolor="black")
         self.ButtonAnnulPari.configure(pady="0")
         self.ButtonAnnulPari.configure(text='''Effacer''')
         self.ButtonAnnulPari.configure(width=107)
        # ----------------Command -----------------
         self.ButtonAnnulPari.configure(command=self.annulPari)
        # ---------------------------------
 
         self.ButtonAffichPari = tk.Button(self.LabelframePari)
         self.ButtonAffichPari.place(relx=0.485, rely=0.732, height=24, width=87
                 , bordermode='ignore')
         self.ButtonAffichPari.configure(activebackground="#ececec")
         self.ButtonAffichPari.configure(activeforeground="#000000")
         self.ButtonAffichPari.configure(background="#d9d9d9")
         self.ButtonAffichPari.configure(disabledforeground="#a3a3a3")
         self.ButtonAffichPari.configure(foreground="#000000")
         self.ButtonAffichPari.configure(highlightbackground="#d9d9d9")
         self.ButtonAffichPari.configure(highlightcolor="black")
         self.ButtonAffichPari.configure(pady="0")
         self.ButtonAffichPari.configure(text='''Afficher''')
         self.ButtonAffichPari.configure(width=87)
         #-------------------------------------
         self.ButtonAffichPari.configure(command =self.recupAnPari)
                
 
         self.LabelframePop = tk.LabelFrame(top)
         self.LabelframePop.place(relx=0.513, rely=0.249, relheight=0.36 , relwidth=0.379)
         self.LabelframePop.configure(relief='groove')
         self.LabelframePop.configure(foreground="black")
         self.LabelframePop.configure(text='''ETUDE PAR POPULATION''')
         self.LabelframePop.configure(background="#d9d9d9")
 
         self.LabelframePop.configure(width=340)
 
         self.EntryPop = tk.Entry(self.LabelframePop)
         self.EntryPop.place(relx=0.382, rely=0.359, height=20, relwidth=0.482, bordermode='ignore')
         self.EntryPop.configure(background="white")
         self.EntryPop.configure(disabledforeground="#a3a3a3")
         self.EntryPop.configure(font="TkFixedFont")
         self.EntryPop.configure(foreground="#000000")
         self.EntryPop.configure(insertbackground="black")
         self.EntryPop.insert(0,"De 2005 a 2016")
         self.LabelPop = tk.Label(self.LabelframePop)
         self.LabelPop.place(relx=0.206, rely=0.359, height=21, width=34
                 , bordermode='ignore')
         self.LabelPop.configure(background="#d9d9d9")
         self.LabelPop.configure(disabledforeground="#a3a3a3")
         self.LabelPop.configure(foreground="#000000")
         self.LabelPop.configure(text='''Annee''')
         self.LabelPop.configure(width=34)
 
         self.ButtonAnnulPop = tk.Button(self.LabelframePop)
         self.ButtonAnnulPop.place(relx=0.118, rely=0.769, height=24, width=93
                 , bordermode='ignore')
         self.ButtonAnnulPop.configure(activebackground="#ececec")
         self.ButtonAnnulPop.configure(activeforeground="#000000")
         self.ButtonAnnulPop.configure(background="#d9d9d9")
         self.ButtonAnnulPop.configure(disabledforeground="#a3a3a3")
         self.ButtonAnnulPop.configure(foreground="#000000")
         self.ButtonAnnulPop.configure(highlightbackground="#d9d9d9")
         self.ButtonAnnulPop.configure(highlightcolor="black")
         self.ButtonAnnulPop.configure(pady="0")
         self.ButtonAnnulPop.configure(text='''Effacer''')
         self.ButtonAnnulPop.configure(width=93)
         #------------------command -------------
         self.ButtonAnnulPop.configure(command=self.annulPop)
         #-------------------Fin command -----------
 
         self.ButtonAffichPop = tk.Button(self.LabelframePop)
         self.ButtonAffichPop.place(relx=0.559, rely=0.769, height=24, width=103
                 , bordermode='ignore')
         self.ButtonAffichPop.configure(activebackground="#ececec")
         self.ButtonAffichPop.configure(activeforeground="#000000")
         self.ButtonAffichPop.configure(background="#d9d9d9")
         self.ButtonAffichPop.configure(disabledforeground="#a3a3a3")
         self.ButtonAffichPop.configure(foreground="#000000")
         self.ButtonAffichPop.configure(highlightbackground="#d9d9d9")
         self.ButtonAffichPop.configure(highlightcolor="black")
         self.ButtonAffichPop.configure(pady="0")
         self.ButtonAffichPop.configure(text='''Afficher''')
         self.ButtonAffichPop.configure(width=103)

         # ------------------------
         self.ButtonAffichPop.configure(command=self.recupAnPop)
         #------------------------

         self.ButtonQuit = tk.Button(top)
         self.ButtonQuit.place(relx=0.858, rely=0.923, height=24, width=97)
         self.ButtonQuit.configure(activebackground="#ececec")
         self.ButtonQuit.configure(activeforeground="#000000")
         self.ButtonQuit.configure(background="#d9d9d9")
         self.ButtonQuit.configure(disabledforeground="#a3a3a3")
         self.ButtonQuit.configure(foreground="#000000")
         self.ButtonQuit.configure(highlightbackground="#d9d9d9")
         self.ButtonQuit.configure(highlightcolor="black")
         self.ButtonQuit.configure(pady="0")
         self.ButtonQuit.configure(text='''Quitter''')
         self.ButtonQuit.configure(width=97)
#    -------------- Command ----------------------
         self.ButtonQuit.configure(command=self.quitter)
#------------------Fin command ------------------
 
         self.Frame1 = tk.Frame(top)
         self.Frame1.place(relx=0.067, rely=0.683, relheight=0.194
                , relwidth=0.842)
         self.Frame1.configure(relief='groove')
         self.Frame1.configure(borderwidth="2")
         self.Frame1.configure(relief="groove")
         self.Frame1.configure(background="#d9d9d9")
         self.Frame1.configure(width=755)

         self.Button1 = tk.Button(self.Frame1)
         self.Button1.place(relx=0.132, rely=0.381, height=34, width=187)
         self.Button1.configure(activebackground="#ececec")
         self.Button1.configure(activeforeground="#000000")
         self.Button1.configure(background="#d9d9d9")
         self.Button1.configure(disabledforeground="#a3a3a3")
         self.Button1.configure(foreground="#000000")
         self.Button1.configure(highlightbackground="#d9d9d9")
         self.Button1.configure(highlightcolor="black")
         self.Button1.configure(pady="0")
         self.Button1.configure(text='''Afficher les paris''')
         self.Button1.configure(width=187)
         self.Button1.configure(command=self.tracerTousPari)
 
         self.Button2 = tk.Button(self.Frame1)
         self.Button2.place(relx=0.583, rely=0.381, height=34, width=187)
         self.Button2.configure(activebackground="#ececec")
         self.Button2.configure(activeforeground="#000000")
         self.Button2.configure(background="#d9d9d9")
         self.Button2.configure(disabledforeground="#a3a3a3")
         self.Button2.configure(foreground="#000000")
         self.Button2.configure(highlightbackground="#d9d9d9")
         self.Button2.configure(highlightcolor="black")
         self.Button2.configure(pady="0")
         self.Button2.configure(text='''Afficher les enjeux''')
         self.Button2.configure(width=187)
         #------------------------------
         self.Button2.configure(command=self.tracerTousPop)

        #-------------------- Fermer ---------
  # def fermerPari(self):
      #  fenetrePari.destroy()

 






if __name__ == '__main__':
    vp_start_gui()
 

